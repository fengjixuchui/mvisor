// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ps2.proto

#ifndef PROTOBUF_ps2_2eproto__INCLUDED
#define PROTOBUF_ps2_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_ps2_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsPs2State_MouseImpl();
void InitDefaultsPs2State_Mouse();
void InitDefaultsPs2State_KeyboardImpl();
void InitDefaultsPs2State_Keyboard();
void InitDefaultsPs2StateImpl();
void InitDefaultsPs2State();
inline void InitDefaults() {
  InitDefaultsPs2State_Mouse();
  InitDefaultsPs2State_Keyboard();
  InitDefaultsPs2State();
}
}  // namespace protobuf_ps2_2eproto
class Ps2State;
class Ps2StateDefaultTypeInternal;
extern Ps2StateDefaultTypeInternal _Ps2State_default_instance_;
class Ps2State_Keyboard;
class Ps2State_KeyboardDefaultTypeInternal;
extern Ps2State_KeyboardDefaultTypeInternal _Ps2State_Keyboard_default_instance_;
class Ps2State_Mouse;
class Ps2State_MouseDefaultTypeInternal;
extern Ps2State_MouseDefaultTypeInternal _Ps2State_Mouse_default_instance_;

// ===================================================================

class Ps2State_Mouse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Ps2State.Mouse) */ {
 public:
  Ps2State_Mouse();
  virtual ~Ps2State_Mouse();

  Ps2State_Mouse(const Ps2State_Mouse& from);

  inline Ps2State_Mouse& operator=(const Ps2State_Mouse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ps2State_Mouse(Ps2State_Mouse&& from) noexcept
    : Ps2State_Mouse() {
    *this = ::std::move(from);
  }

  inline Ps2State_Mouse& operator=(Ps2State_Mouse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Ps2State_Mouse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ps2State_Mouse* internal_default_instance() {
    return reinterpret_cast<const Ps2State_Mouse*>(
               &_Ps2State_Mouse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Ps2State_Mouse* other);
  friend void swap(Ps2State_Mouse& a, Ps2State_Mouse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ps2State_Mouse* New() const PROTOBUF_FINAL { return New(NULL); }

  Ps2State_Mouse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Ps2State_Mouse& from);
  void MergeFrom(const Ps2State_Mouse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Ps2State_Mouse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 buttons = 1;
  void clear_buttons();
  static const int kButtonsFieldNumber = 1;
  ::google::protobuf::uint32 buttons() const;
  void set_buttons(::google::protobuf::uint32 value);

  // uint32 dx = 2;
  void clear_dx();
  static const int kDxFieldNumber = 2;
  ::google::protobuf::uint32 dx() const;
  void set_dx(::google::protobuf::uint32 value);

  // uint32 dy = 3;
  void clear_dy();
  static const int kDyFieldNumber = 3;
  ::google::protobuf::uint32 dy() const;
  void set_dy(::google::protobuf::uint32 value);

  // uint32 resolution = 4;
  void clear_resolution();
  static const int kResolutionFieldNumber = 4;
  ::google::protobuf::uint32 resolution() const;
  void set_resolution(::google::protobuf::uint32 value);

  // uint32 sample_rate = 5;
  void clear_sample_rate();
  static const int kSampleRateFieldNumber = 5;
  ::google::protobuf::uint32 sample_rate() const;
  void set_sample_rate(::google::protobuf::uint32 value);

  // uint32 scaling = 6;
  void clear_scaling();
  static const int kScalingFieldNumber = 6;
  ::google::protobuf::uint32 scaling() const;
  void set_scaling(::google::protobuf::uint32 value);

  // uint32 stream_mode = 7;
  void clear_stream_mode();
  static const int kStreamModeFieldNumber = 7;
  ::google::protobuf::uint32 stream_mode() const;
  void set_stream_mode(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Ps2State.Mouse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 buttons_;
  ::google::protobuf::uint32 dx_;
  ::google::protobuf::uint32 dy_;
  ::google::protobuf::uint32 resolution_;
  ::google::protobuf::uint32 sample_rate_;
  ::google::protobuf::uint32 scaling_;
  ::google::protobuf::uint32 stream_mode_;
  mutable int _cached_size_;
  friend struct ::protobuf_ps2_2eproto::TableStruct;
  friend void ::protobuf_ps2_2eproto::InitDefaultsPs2State_MouseImpl();
};
// -------------------------------------------------------------------

class Ps2State_Keyboard : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Ps2State.Keyboard) */ {
 public:
  Ps2State_Keyboard();
  virtual ~Ps2State_Keyboard();

  Ps2State_Keyboard(const Ps2State_Keyboard& from);

  inline Ps2State_Keyboard& operator=(const Ps2State_Keyboard& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ps2State_Keyboard(Ps2State_Keyboard&& from) noexcept
    : Ps2State_Keyboard() {
    *this = ::std::move(from);
  }

  inline Ps2State_Keyboard& operator=(Ps2State_Keyboard&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Ps2State_Keyboard& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ps2State_Keyboard* internal_default_instance() {
    return reinterpret_cast<const Ps2State_Keyboard*>(
               &_Ps2State_Keyboard_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Ps2State_Keyboard* other);
  friend void swap(Ps2State_Keyboard& a, Ps2State_Keyboard& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ps2State_Keyboard* New() const PROTOBUF_FINAL { return New(NULL); }

  Ps2State_Keyboard* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Ps2State_Keyboard& from);
  void MergeFrom(const Ps2State_Keyboard& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Ps2State_Keyboard* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 scancode_set = 1;
  void clear_scancode_set();
  static const int kScancodeSetFieldNumber = 1;
  ::google::protobuf::uint32 scancode_set() const;
  void set_scancode_set(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Ps2State.Keyboard)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 scancode_set_;
  mutable int _cached_size_;
  friend struct ::protobuf_ps2_2eproto::TableStruct;
  friend void ::protobuf_ps2_2eproto::InitDefaultsPs2State_KeyboardImpl();
};
// -------------------------------------------------------------------

class Ps2State : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Ps2State) */ {
 public:
  Ps2State();
  virtual ~Ps2State();

  Ps2State(const Ps2State& from);

  inline Ps2State& operator=(const Ps2State& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ps2State(Ps2State&& from) noexcept
    : Ps2State() {
    *this = ::std::move(from);
  }

  inline Ps2State& operator=(Ps2State&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Ps2State& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ps2State* internal_default_instance() {
    return reinterpret_cast<const Ps2State*>(
               &_Ps2State_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Ps2State* other);
  friend void swap(Ps2State& a, Ps2State& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ps2State* New() const PROTOBUF_FINAL { return New(NULL); }

  Ps2State* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Ps2State& from);
  void MergeFrom(const Ps2State& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Ps2State* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Ps2State_Mouse Mouse;
  typedef Ps2State_Keyboard Keyboard;

  // accessors -------------------------------------------------------

  // .Ps2State.Keyboard keyboard = 3;
  bool has_keyboard() const;
  void clear_keyboard();
  static const int kKeyboardFieldNumber = 3;
  const ::Ps2State_Keyboard& keyboard() const;
  ::Ps2State_Keyboard* release_keyboard();
  ::Ps2State_Keyboard* mutable_keyboard();
  void set_allocated_keyboard(::Ps2State_Keyboard* keyboard);

  // .Ps2State.Mouse mouse = 4;
  bool has_mouse() const;
  void clear_mouse();
  static const int kMouseFieldNumber = 4;
  const ::Ps2State_Mouse& mouse() const;
  ::Ps2State_Mouse* release_mouse();
  ::Ps2State_Mouse* mutable_mouse();
  void set_allocated_mouse(::Ps2State_Mouse* mouse);

  // uint32 status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::google::protobuf::uint32 status() const;
  void set_status(::google::protobuf::uint32 value);

  // uint32 mode = 2;
  void clear_mode();
  static const int kModeFieldNumber = 2;
  ::google::protobuf::uint32 mode() const;
  void set_mode(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Ps2State)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::Ps2State_Keyboard* keyboard_;
  ::Ps2State_Mouse* mouse_;
  ::google::protobuf::uint32 status_;
  ::google::protobuf::uint32 mode_;
  mutable int _cached_size_;
  friend struct ::protobuf_ps2_2eproto::TableStruct;
  friend void ::protobuf_ps2_2eproto::InitDefaultsPs2StateImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Ps2State_Mouse

// uint32 buttons = 1;
inline void Ps2State_Mouse::clear_buttons() {
  buttons_ = 0u;
}
inline ::google::protobuf::uint32 Ps2State_Mouse::buttons() const {
  // @@protoc_insertion_point(field_get:Ps2State.Mouse.buttons)
  return buttons_;
}
inline void Ps2State_Mouse::set_buttons(::google::protobuf::uint32 value) {
  
  buttons_ = value;
  // @@protoc_insertion_point(field_set:Ps2State.Mouse.buttons)
}

// uint32 dx = 2;
inline void Ps2State_Mouse::clear_dx() {
  dx_ = 0u;
}
inline ::google::protobuf::uint32 Ps2State_Mouse::dx() const {
  // @@protoc_insertion_point(field_get:Ps2State.Mouse.dx)
  return dx_;
}
inline void Ps2State_Mouse::set_dx(::google::protobuf::uint32 value) {
  
  dx_ = value;
  // @@protoc_insertion_point(field_set:Ps2State.Mouse.dx)
}

// uint32 dy = 3;
inline void Ps2State_Mouse::clear_dy() {
  dy_ = 0u;
}
inline ::google::protobuf::uint32 Ps2State_Mouse::dy() const {
  // @@protoc_insertion_point(field_get:Ps2State.Mouse.dy)
  return dy_;
}
inline void Ps2State_Mouse::set_dy(::google::protobuf::uint32 value) {
  
  dy_ = value;
  // @@protoc_insertion_point(field_set:Ps2State.Mouse.dy)
}

// uint32 resolution = 4;
inline void Ps2State_Mouse::clear_resolution() {
  resolution_ = 0u;
}
inline ::google::protobuf::uint32 Ps2State_Mouse::resolution() const {
  // @@protoc_insertion_point(field_get:Ps2State.Mouse.resolution)
  return resolution_;
}
inline void Ps2State_Mouse::set_resolution(::google::protobuf::uint32 value) {
  
  resolution_ = value;
  // @@protoc_insertion_point(field_set:Ps2State.Mouse.resolution)
}

// uint32 sample_rate = 5;
inline void Ps2State_Mouse::clear_sample_rate() {
  sample_rate_ = 0u;
}
inline ::google::protobuf::uint32 Ps2State_Mouse::sample_rate() const {
  // @@protoc_insertion_point(field_get:Ps2State.Mouse.sample_rate)
  return sample_rate_;
}
inline void Ps2State_Mouse::set_sample_rate(::google::protobuf::uint32 value) {
  
  sample_rate_ = value;
  // @@protoc_insertion_point(field_set:Ps2State.Mouse.sample_rate)
}

// uint32 scaling = 6;
inline void Ps2State_Mouse::clear_scaling() {
  scaling_ = 0u;
}
inline ::google::protobuf::uint32 Ps2State_Mouse::scaling() const {
  // @@protoc_insertion_point(field_get:Ps2State.Mouse.scaling)
  return scaling_;
}
inline void Ps2State_Mouse::set_scaling(::google::protobuf::uint32 value) {
  
  scaling_ = value;
  // @@protoc_insertion_point(field_set:Ps2State.Mouse.scaling)
}

// uint32 stream_mode = 7;
inline void Ps2State_Mouse::clear_stream_mode() {
  stream_mode_ = 0u;
}
inline ::google::protobuf::uint32 Ps2State_Mouse::stream_mode() const {
  // @@protoc_insertion_point(field_get:Ps2State.Mouse.stream_mode)
  return stream_mode_;
}
inline void Ps2State_Mouse::set_stream_mode(::google::protobuf::uint32 value) {
  
  stream_mode_ = value;
  // @@protoc_insertion_point(field_set:Ps2State.Mouse.stream_mode)
}

// -------------------------------------------------------------------

// Ps2State_Keyboard

// uint32 scancode_set = 1;
inline void Ps2State_Keyboard::clear_scancode_set() {
  scancode_set_ = 0u;
}
inline ::google::protobuf::uint32 Ps2State_Keyboard::scancode_set() const {
  // @@protoc_insertion_point(field_get:Ps2State.Keyboard.scancode_set)
  return scancode_set_;
}
inline void Ps2State_Keyboard::set_scancode_set(::google::protobuf::uint32 value) {
  
  scancode_set_ = value;
  // @@protoc_insertion_point(field_set:Ps2State.Keyboard.scancode_set)
}

// -------------------------------------------------------------------

// Ps2State

// uint32 status = 1;
inline void Ps2State::clear_status() {
  status_ = 0u;
}
inline ::google::protobuf::uint32 Ps2State::status() const {
  // @@protoc_insertion_point(field_get:Ps2State.status)
  return status_;
}
inline void Ps2State::set_status(::google::protobuf::uint32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:Ps2State.status)
}

// uint32 mode = 2;
inline void Ps2State::clear_mode() {
  mode_ = 0u;
}
inline ::google::protobuf::uint32 Ps2State::mode() const {
  // @@protoc_insertion_point(field_get:Ps2State.mode)
  return mode_;
}
inline void Ps2State::set_mode(::google::protobuf::uint32 value) {
  
  mode_ = value;
  // @@protoc_insertion_point(field_set:Ps2State.mode)
}

// .Ps2State.Keyboard keyboard = 3;
inline bool Ps2State::has_keyboard() const {
  return this != internal_default_instance() && keyboard_ != NULL;
}
inline void Ps2State::clear_keyboard() {
  if (GetArenaNoVirtual() == NULL && keyboard_ != NULL) {
    delete keyboard_;
  }
  keyboard_ = NULL;
}
inline const ::Ps2State_Keyboard& Ps2State::keyboard() const {
  const ::Ps2State_Keyboard* p = keyboard_;
  // @@protoc_insertion_point(field_get:Ps2State.keyboard)
  return p != NULL ? *p : *reinterpret_cast<const ::Ps2State_Keyboard*>(
      &::_Ps2State_Keyboard_default_instance_);
}
inline ::Ps2State_Keyboard* Ps2State::release_keyboard() {
  // @@protoc_insertion_point(field_release:Ps2State.keyboard)
  
  ::Ps2State_Keyboard* temp = keyboard_;
  keyboard_ = NULL;
  return temp;
}
inline ::Ps2State_Keyboard* Ps2State::mutable_keyboard() {
  
  if (keyboard_ == NULL) {
    keyboard_ = new ::Ps2State_Keyboard;
  }
  // @@protoc_insertion_point(field_mutable:Ps2State.keyboard)
  return keyboard_;
}
inline void Ps2State::set_allocated_keyboard(::Ps2State_Keyboard* keyboard) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete keyboard_;
  }
  if (keyboard) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      keyboard = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, keyboard, submessage_arena);
    }
    
  } else {
    
  }
  keyboard_ = keyboard;
  // @@protoc_insertion_point(field_set_allocated:Ps2State.keyboard)
}

// .Ps2State.Mouse mouse = 4;
inline bool Ps2State::has_mouse() const {
  return this != internal_default_instance() && mouse_ != NULL;
}
inline void Ps2State::clear_mouse() {
  if (GetArenaNoVirtual() == NULL && mouse_ != NULL) {
    delete mouse_;
  }
  mouse_ = NULL;
}
inline const ::Ps2State_Mouse& Ps2State::mouse() const {
  const ::Ps2State_Mouse* p = mouse_;
  // @@protoc_insertion_point(field_get:Ps2State.mouse)
  return p != NULL ? *p : *reinterpret_cast<const ::Ps2State_Mouse*>(
      &::_Ps2State_Mouse_default_instance_);
}
inline ::Ps2State_Mouse* Ps2State::release_mouse() {
  // @@protoc_insertion_point(field_release:Ps2State.mouse)
  
  ::Ps2State_Mouse* temp = mouse_;
  mouse_ = NULL;
  return temp;
}
inline ::Ps2State_Mouse* Ps2State::mutable_mouse() {
  
  if (mouse_ == NULL) {
    mouse_ = new ::Ps2State_Mouse;
  }
  // @@protoc_insertion_point(field_mutable:Ps2State.mouse)
  return mouse_;
}
inline void Ps2State::set_allocated_mouse(::Ps2State_Mouse* mouse) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete mouse_;
  }
  if (mouse) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mouse = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mouse, submessage_arena);
    }
    
  } else {
    
  }
  mouse_ = mouse;
  // @@protoc_insertion_point(field_set_allocated:Ps2State.mouse)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ps2_2eproto__INCLUDED
