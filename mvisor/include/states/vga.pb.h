// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vga.proto

#ifndef PROTOBUF_vga_2eproto__INCLUDED
#define PROTOBUF_vga_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_vga_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsVgaStateImpl();
void InitDefaultsVgaState();
void InitDefaultsVbeStateImpl();
void InitDefaultsVbeState();
inline void InitDefaults() {
  InitDefaultsVgaState();
  InitDefaultsVbeState();
}
}  // namespace protobuf_vga_2eproto
class VbeState;
class VbeStateDefaultTypeInternal;
extern VbeStateDefaultTypeInternal _VbeState_default_instance_;
class VgaState;
class VgaStateDefaultTypeInternal;
extern VgaStateDefaultTypeInternal _VgaState_default_instance_;

// ===================================================================

class VgaState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:VgaState) */ {
 public:
  VgaState();
  virtual ~VgaState();

  VgaState(const VgaState& from);

  inline VgaState& operator=(const VgaState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VgaState(VgaState&& from) noexcept
    : VgaState() {
    *this = ::std::move(from);
  }

  inline VgaState& operator=(VgaState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VgaState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VgaState* internal_default_instance() {
    return reinterpret_cast<const VgaState*>(
               &_VgaState_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(VgaState* other);
  friend void swap(VgaState& a, VgaState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VgaState* New() const PROTOBUF_FINAL { return New(NULL); }

  VgaState* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VgaState& from);
  void MergeFrom(const VgaState& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VgaState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes sequence = 4;
  void clear_sequence();
  static const int kSequenceFieldNumber = 4;
  const ::std::string& sequence() const;
  void set_sequence(const ::std::string& value);
  #if LANG_CXX11
  void set_sequence(::std::string&& value);
  #endif
  void set_sequence(const char* value);
  void set_sequence(const void* value, size_t size);
  ::std::string* mutable_sequence();
  ::std::string* release_sequence();
  void set_allocated_sequence(::std::string* sequence);

  // bytes gfx = 6;
  void clear_gfx();
  static const int kGfxFieldNumber = 6;
  const ::std::string& gfx() const;
  void set_gfx(const ::std::string& value);
  #if LANG_CXX11
  void set_gfx(::std::string&& value);
  #endif
  void set_gfx(const char* value);
  void set_gfx(const void* value, size_t size);
  ::std::string* mutable_gfx();
  ::std::string* release_gfx();
  void set_allocated_gfx(::std::string* gfx);

  // bytes attribute = 8;
  void clear_attribute();
  static const int kAttributeFieldNumber = 8;
  const ::std::string& attribute() const;
  void set_attribute(const ::std::string& value);
  #if LANG_CXX11
  void set_attribute(::std::string&& value);
  #endif
  void set_attribute(const char* value);
  void set_attribute(const void* value, size_t size);
  ::std::string* mutable_attribute();
  ::std::string* release_attribute();
  void set_allocated_attribute(::std::string* attribute);

  // bytes crtc = 10;
  void clear_crtc();
  static const int kCrtcFieldNumber = 10;
  const ::std::string& crtc() const;
  void set_crtc(const ::std::string& value);
  #if LANG_CXX11
  void set_crtc(::std::string&& value);
  #endif
  void set_crtc(const char* value);
  void set_crtc(const void* value, size_t size);
  ::std::string* mutable_crtc();
  ::std::string* release_crtc();
  void set_allocated_crtc(::std::string* crtc);

  // bytes pallete = 13;
  void clear_pallete();
  static const int kPalleteFieldNumber = 13;
  const ::std::string& pallete() const;
  void set_pallete(const ::std::string& value);
  #if LANG_CXX11
  void set_pallete(::std::string&& value);
  #endif
  void set_pallete(const char* value);
  void set_pallete(const void* value, size_t size);
  ::std::string* mutable_pallete();
  ::std::string* release_pallete();
  void set_allocated_pallete(::std::string* pallete);

  // uint32 misc_output = 1;
  void clear_misc_output();
  static const int kMiscOutputFieldNumber = 1;
  ::google::protobuf::uint32 misc_output() const;
  void set_misc_output(::google::protobuf::uint32 value);

  // uint32 status = 2;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  ::google::protobuf::uint32 status() const;
  void set_status(::google::protobuf::uint32 value);

  // uint32 sequence_index = 3;
  void clear_sequence_index();
  static const int kSequenceIndexFieldNumber = 3;
  ::google::protobuf::uint32 sequence_index() const;
  void set_sequence_index(::google::protobuf::uint32 value);

  // uint32 gfx_index = 5;
  void clear_gfx_index();
  static const int kGfxIndexFieldNumber = 5;
  ::google::protobuf::uint32 gfx_index() const;
  void set_gfx_index(::google::protobuf::uint32 value);

  // uint32 attribute_index = 7;
  void clear_attribute_index();
  static const int kAttributeIndexFieldNumber = 7;
  ::google::protobuf::uint32 attribute_index() const;
  void set_attribute_index(::google::protobuf::uint32 value);

  // uint32 crtc_index = 9;
  void clear_crtc_index();
  static const int kCrtcIndexFieldNumber = 9;
  ::google::protobuf::uint32 crtc_index() const;
  void set_crtc_index(::google::protobuf::uint32 value);

  // uint32 pallete_read_index = 11;
  void clear_pallete_read_index();
  static const int kPalleteReadIndexFieldNumber = 11;
  ::google::protobuf::uint32 pallete_read_index() const;
  void set_pallete_read_index(::google::protobuf::uint32 value);

  // uint32 pallete_write_index = 12;
  void clear_pallete_write_index();
  static const int kPalleteWriteIndexFieldNumber = 12;
  ::google::protobuf::uint32 pallete_write_index() const;
  void set_pallete_write_index(::google::protobuf::uint32 value);

  // uint32 dac_state = 14;
  void clear_dac_state();
  static const int kDacStateFieldNumber = 14;
  ::google::protobuf::uint32 dac_state() const;
  void set_dac_state(::google::protobuf::uint32 value);

  // uint32 feature_control = 15;
  void clear_feature_control();
  static const int kFeatureControlFieldNumber = 15;
  ::google::protobuf::uint32 feature_control() const;
  void set_feature_control(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:VgaState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sequence_;
  ::google::protobuf::internal::ArenaStringPtr gfx_;
  ::google::protobuf::internal::ArenaStringPtr attribute_;
  ::google::protobuf::internal::ArenaStringPtr crtc_;
  ::google::protobuf::internal::ArenaStringPtr pallete_;
  ::google::protobuf::uint32 misc_output_;
  ::google::protobuf::uint32 status_;
  ::google::protobuf::uint32 sequence_index_;
  ::google::protobuf::uint32 gfx_index_;
  ::google::protobuf::uint32 attribute_index_;
  ::google::protobuf::uint32 crtc_index_;
  ::google::protobuf::uint32 pallete_read_index_;
  ::google::protobuf::uint32 pallete_write_index_;
  ::google::protobuf::uint32 dac_state_;
  ::google::protobuf::uint32 feature_control_;
  mutable int _cached_size_;
  friend struct ::protobuf_vga_2eproto::TableStruct;
  friend void ::protobuf_vga_2eproto::InitDefaultsVgaStateImpl();
};
// -------------------------------------------------------------------

class VbeState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:VbeState) */ {
 public:
  VbeState();
  virtual ~VbeState();

  VbeState(const VbeState& from);

  inline VbeState& operator=(const VbeState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VbeState(VbeState&& from) noexcept
    : VbeState() {
    *this = ::std::move(from);
  }

  inline VbeState& operator=(VbeState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VbeState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VbeState* internal_default_instance() {
    return reinterpret_cast<const VbeState*>(
               &_VbeState_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(VbeState* other);
  friend void swap(VbeState& a, VbeState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VbeState* New() const PROTOBUF_FINAL { return New(NULL); }

  VbeState* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VbeState& from);
  void MergeFrom(const VbeState& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VbeState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes registers = 3;
  void clear_registers();
  static const int kRegistersFieldNumber = 3;
  const ::std::string& registers() const;
  void set_registers(const ::std::string& value);
  #if LANG_CXX11
  void set_registers(::std::string&& value);
  #endif
  void set_registers(const char* value);
  void set_registers(const void* value, size_t size);
  ::std::string* mutable_registers();
  ::std::string* release_registers();
  void set_allocated_registers(::std::string* registers);

  // uint32 version = 1;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // uint32 index = 2;
  void clear_index();
  static const int kIndexFieldNumber = 2;
  ::google::protobuf::uint32 index() const;
  void set_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:VbeState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr registers_;
  ::google::protobuf::uint32 version_;
  ::google::protobuf::uint32 index_;
  mutable int _cached_size_;
  friend struct ::protobuf_vga_2eproto::TableStruct;
  friend void ::protobuf_vga_2eproto::InitDefaultsVbeStateImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VgaState

// uint32 misc_output = 1;
inline void VgaState::clear_misc_output() {
  misc_output_ = 0u;
}
inline ::google::protobuf::uint32 VgaState::misc_output() const {
  // @@protoc_insertion_point(field_get:VgaState.misc_output)
  return misc_output_;
}
inline void VgaState::set_misc_output(::google::protobuf::uint32 value) {
  
  misc_output_ = value;
  // @@protoc_insertion_point(field_set:VgaState.misc_output)
}

// uint32 status = 2;
inline void VgaState::clear_status() {
  status_ = 0u;
}
inline ::google::protobuf::uint32 VgaState::status() const {
  // @@protoc_insertion_point(field_get:VgaState.status)
  return status_;
}
inline void VgaState::set_status(::google::protobuf::uint32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:VgaState.status)
}

// uint32 sequence_index = 3;
inline void VgaState::clear_sequence_index() {
  sequence_index_ = 0u;
}
inline ::google::protobuf::uint32 VgaState::sequence_index() const {
  // @@protoc_insertion_point(field_get:VgaState.sequence_index)
  return sequence_index_;
}
inline void VgaState::set_sequence_index(::google::protobuf::uint32 value) {
  
  sequence_index_ = value;
  // @@protoc_insertion_point(field_set:VgaState.sequence_index)
}

// bytes sequence = 4;
inline void VgaState::clear_sequence() {
  sequence_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VgaState::sequence() const {
  // @@protoc_insertion_point(field_get:VgaState.sequence)
  return sequence_.GetNoArena();
}
inline void VgaState::set_sequence(const ::std::string& value) {
  
  sequence_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VgaState.sequence)
}
#if LANG_CXX11
inline void VgaState::set_sequence(::std::string&& value) {
  
  sequence_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VgaState.sequence)
}
#endif
inline void VgaState::set_sequence(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sequence_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VgaState.sequence)
}
inline void VgaState::set_sequence(const void* value, size_t size) {
  
  sequence_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VgaState.sequence)
}
inline ::std::string* VgaState::mutable_sequence() {
  
  // @@protoc_insertion_point(field_mutable:VgaState.sequence)
  return sequence_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VgaState::release_sequence() {
  // @@protoc_insertion_point(field_release:VgaState.sequence)
  
  return sequence_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VgaState::set_allocated_sequence(::std::string* sequence) {
  if (sequence != NULL) {
    
  } else {
    
  }
  sequence_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sequence);
  // @@protoc_insertion_point(field_set_allocated:VgaState.sequence)
}

// uint32 gfx_index = 5;
inline void VgaState::clear_gfx_index() {
  gfx_index_ = 0u;
}
inline ::google::protobuf::uint32 VgaState::gfx_index() const {
  // @@protoc_insertion_point(field_get:VgaState.gfx_index)
  return gfx_index_;
}
inline void VgaState::set_gfx_index(::google::protobuf::uint32 value) {
  
  gfx_index_ = value;
  // @@protoc_insertion_point(field_set:VgaState.gfx_index)
}

// bytes gfx = 6;
inline void VgaState::clear_gfx() {
  gfx_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VgaState::gfx() const {
  // @@protoc_insertion_point(field_get:VgaState.gfx)
  return gfx_.GetNoArena();
}
inline void VgaState::set_gfx(const ::std::string& value) {
  
  gfx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VgaState.gfx)
}
#if LANG_CXX11
inline void VgaState::set_gfx(::std::string&& value) {
  
  gfx_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VgaState.gfx)
}
#endif
inline void VgaState::set_gfx(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gfx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VgaState.gfx)
}
inline void VgaState::set_gfx(const void* value, size_t size) {
  
  gfx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VgaState.gfx)
}
inline ::std::string* VgaState::mutable_gfx() {
  
  // @@protoc_insertion_point(field_mutable:VgaState.gfx)
  return gfx_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VgaState::release_gfx() {
  // @@protoc_insertion_point(field_release:VgaState.gfx)
  
  return gfx_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VgaState::set_allocated_gfx(::std::string* gfx) {
  if (gfx != NULL) {
    
  } else {
    
  }
  gfx_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gfx);
  // @@protoc_insertion_point(field_set_allocated:VgaState.gfx)
}

// uint32 attribute_index = 7;
inline void VgaState::clear_attribute_index() {
  attribute_index_ = 0u;
}
inline ::google::protobuf::uint32 VgaState::attribute_index() const {
  // @@protoc_insertion_point(field_get:VgaState.attribute_index)
  return attribute_index_;
}
inline void VgaState::set_attribute_index(::google::protobuf::uint32 value) {
  
  attribute_index_ = value;
  // @@protoc_insertion_point(field_set:VgaState.attribute_index)
}

// bytes attribute = 8;
inline void VgaState::clear_attribute() {
  attribute_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VgaState::attribute() const {
  // @@protoc_insertion_point(field_get:VgaState.attribute)
  return attribute_.GetNoArena();
}
inline void VgaState::set_attribute(const ::std::string& value) {
  
  attribute_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VgaState.attribute)
}
#if LANG_CXX11
inline void VgaState::set_attribute(::std::string&& value) {
  
  attribute_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VgaState.attribute)
}
#endif
inline void VgaState::set_attribute(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  attribute_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VgaState.attribute)
}
inline void VgaState::set_attribute(const void* value, size_t size) {
  
  attribute_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VgaState.attribute)
}
inline ::std::string* VgaState::mutable_attribute() {
  
  // @@protoc_insertion_point(field_mutable:VgaState.attribute)
  return attribute_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VgaState::release_attribute() {
  // @@protoc_insertion_point(field_release:VgaState.attribute)
  
  return attribute_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VgaState::set_allocated_attribute(::std::string* attribute) {
  if (attribute != NULL) {
    
  } else {
    
  }
  attribute_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attribute);
  // @@protoc_insertion_point(field_set_allocated:VgaState.attribute)
}

// uint32 crtc_index = 9;
inline void VgaState::clear_crtc_index() {
  crtc_index_ = 0u;
}
inline ::google::protobuf::uint32 VgaState::crtc_index() const {
  // @@protoc_insertion_point(field_get:VgaState.crtc_index)
  return crtc_index_;
}
inline void VgaState::set_crtc_index(::google::protobuf::uint32 value) {
  
  crtc_index_ = value;
  // @@protoc_insertion_point(field_set:VgaState.crtc_index)
}

// bytes crtc = 10;
inline void VgaState::clear_crtc() {
  crtc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VgaState::crtc() const {
  // @@protoc_insertion_point(field_get:VgaState.crtc)
  return crtc_.GetNoArena();
}
inline void VgaState::set_crtc(const ::std::string& value) {
  
  crtc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VgaState.crtc)
}
#if LANG_CXX11
inline void VgaState::set_crtc(::std::string&& value) {
  
  crtc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VgaState.crtc)
}
#endif
inline void VgaState::set_crtc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  crtc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VgaState.crtc)
}
inline void VgaState::set_crtc(const void* value, size_t size) {
  
  crtc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VgaState.crtc)
}
inline ::std::string* VgaState::mutable_crtc() {
  
  // @@protoc_insertion_point(field_mutable:VgaState.crtc)
  return crtc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VgaState::release_crtc() {
  // @@protoc_insertion_point(field_release:VgaState.crtc)
  
  return crtc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VgaState::set_allocated_crtc(::std::string* crtc) {
  if (crtc != NULL) {
    
  } else {
    
  }
  crtc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), crtc);
  // @@protoc_insertion_point(field_set_allocated:VgaState.crtc)
}

// uint32 pallete_read_index = 11;
inline void VgaState::clear_pallete_read_index() {
  pallete_read_index_ = 0u;
}
inline ::google::protobuf::uint32 VgaState::pallete_read_index() const {
  // @@protoc_insertion_point(field_get:VgaState.pallete_read_index)
  return pallete_read_index_;
}
inline void VgaState::set_pallete_read_index(::google::protobuf::uint32 value) {
  
  pallete_read_index_ = value;
  // @@protoc_insertion_point(field_set:VgaState.pallete_read_index)
}

// uint32 pallete_write_index = 12;
inline void VgaState::clear_pallete_write_index() {
  pallete_write_index_ = 0u;
}
inline ::google::protobuf::uint32 VgaState::pallete_write_index() const {
  // @@protoc_insertion_point(field_get:VgaState.pallete_write_index)
  return pallete_write_index_;
}
inline void VgaState::set_pallete_write_index(::google::protobuf::uint32 value) {
  
  pallete_write_index_ = value;
  // @@protoc_insertion_point(field_set:VgaState.pallete_write_index)
}

// bytes pallete = 13;
inline void VgaState::clear_pallete() {
  pallete_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VgaState::pallete() const {
  // @@protoc_insertion_point(field_get:VgaState.pallete)
  return pallete_.GetNoArena();
}
inline void VgaState::set_pallete(const ::std::string& value) {
  
  pallete_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VgaState.pallete)
}
#if LANG_CXX11
inline void VgaState::set_pallete(::std::string&& value) {
  
  pallete_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VgaState.pallete)
}
#endif
inline void VgaState::set_pallete(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pallete_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VgaState.pallete)
}
inline void VgaState::set_pallete(const void* value, size_t size) {
  
  pallete_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VgaState.pallete)
}
inline ::std::string* VgaState::mutable_pallete() {
  
  // @@protoc_insertion_point(field_mutable:VgaState.pallete)
  return pallete_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VgaState::release_pallete() {
  // @@protoc_insertion_point(field_release:VgaState.pallete)
  
  return pallete_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VgaState::set_allocated_pallete(::std::string* pallete) {
  if (pallete != NULL) {
    
  } else {
    
  }
  pallete_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pallete);
  // @@protoc_insertion_point(field_set_allocated:VgaState.pallete)
}

// uint32 dac_state = 14;
inline void VgaState::clear_dac_state() {
  dac_state_ = 0u;
}
inline ::google::protobuf::uint32 VgaState::dac_state() const {
  // @@protoc_insertion_point(field_get:VgaState.dac_state)
  return dac_state_;
}
inline void VgaState::set_dac_state(::google::protobuf::uint32 value) {
  
  dac_state_ = value;
  // @@protoc_insertion_point(field_set:VgaState.dac_state)
}

// uint32 feature_control = 15;
inline void VgaState::clear_feature_control() {
  feature_control_ = 0u;
}
inline ::google::protobuf::uint32 VgaState::feature_control() const {
  // @@protoc_insertion_point(field_get:VgaState.feature_control)
  return feature_control_;
}
inline void VgaState::set_feature_control(::google::protobuf::uint32 value) {
  
  feature_control_ = value;
  // @@protoc_insertion_point(field_set:VgaState.feature_control)
}

// -------------------------------------------------------------------

// VbeState

// uint32 version = 1;
inline void VbeState::clear_version() {
  version_ = 0u;
}
inline ::google::protobuf::uint32 VbeState::version() const {
  // @@protoc_insertion_point(field_get:VbeState.version)
  return version_;
}
inline void VbeState::set_version(::google::protobuf::uint32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:VbeState.version)
}

// uint32 index = 2;
inline void VbeState::clear_index() {
  index_ = 0u;
}
inline ::google::protobuf::uint32 VbeState::index() const {
  // @@protoc_insertion_point(field_get:VbeState.index)
  return index_;
}
inline void VbeState::set_index(::google::protobuf::uint32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:VbeState.index)
}

// bytes registers = 3;
inline void VbeState::clear_registers() {
  registers_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VbeState::registers() const {
  // @@protoc_insertion_point(field_get:VbeState.registers)
  return registers_.GetNoArena();
}
inline void VbeState::set_registers(const ::std::string& value) {
  
  registers_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VbeState.registers)
}
#if LANG_CXX11
inline void VbeState::set_registers(::std::string&& value) {
  
  registers_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VbeState.registers)
}
#endif
inline void VbeState::set_registers(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  registers_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VbeState.registers)
}
inline void VbeState::set_registers(const void* value, size_t size) {
  
  registers_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VbeState.registers)
}
inline ::std::string* VbeState::mutable_registers() {
  
  // @@protoc_insertion_point(field_mutable:VbeState.registers)
  return registers_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VbeState::release_registers() {
  // @@protoc_insertion_point(field_release:VbeState.registers)
  
  return registers_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VbeState::set_allocated_registers(::std::string* registers) {
  if (registers != NULL) {
    
  } else {
    
  }
  registers_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), registers);
  // @@protoc_insertion_point(field_set_allocated:VbeState.registers)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_vga_2eproto__INCLUDED
