// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hda_duplex.proto

#ifndef PROTOBUF_hda_5fduplex_2eproto__INCLUDED
#define PROTOBUF_hda_5fduplex_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_hda_5fduplex_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsHdaDuplexState_StreamImpl();
void InitDefaultsHdaDuplexState_Stream();
void InitDefaultsHdaDuplexStateImpl();
void InitDefaultsHdaDuplexState();
inline void InitDefaults() {
  InitDefaultsHdaDuplexState_Stream();
  InitDefaultsHdaDuplexState();
}
}  // namespace protobuf_hda_5fduplex_2eproto
class HdaDuplexState;
class HdaDuplexStateDefaultTypeInternal;
extern HdaDuplexStateDefaultTypeInternal _HdaDuplexState_default_instance_;
class HdaDuplexState_Stream;
class HdaDuplexState_StreamDefaultTypeInternal;
extern HdaDuplexState_StreamDefaultTypeInternal _HdaDuplexState_Stream_default_instance_;

// ===================================================================

class HdaDuplexState_Stream : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HdaDuplexState.Stream) */ {
 public:
  HdaDuplexState_Stream();
  virtual ~HdaDuplexState_Stream();

  HdaDuplexState_Stream(const HdaDuplexState_Stream& from);

  inline HdaDuplexState_Stream& operator=(const HdaDuplexState_Stream& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HdaDuplexState_Stream(HdaDuplexState_Stream&& from) noexcept
    : HdaDuplexState_Stream() {
    *this = ::std::move(from);
  }

  inline HdaDuplexState_Stream& operator=(HdaDuplexState_Stream&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HdaDuplexState_Stream& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HdaDuplexState_Stream* internal_default_instance() {
    return reinterpret_cast<const HdaDuplexState_Stream*>(
               &_HdaDuplexState_Stream_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(HdaDuplexState_Stream* other);
  friend void swap(HdaDuplexState_Stream& a, HdaDuplexState_Stream& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HdaDuplexState_Stream* New() const PROTOBUF_FINAL { return New(NULL); }

  HdaDuplexState_Stream* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HdaDuplexState_Stream& from);
  void MergeFrom(const HdaDuplexState_Stream& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HdaDuplexState_Stream* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // uint32 channel = 2;
  void clear_channel();
  static const int kChannelFieldNumber = 2;
  ::google::protobuf::uint32 channel() const;
  void set_channel(::google::protobuf::uint32 value);

  // uint32 format = 3;
  void clear_format();
  static const int kFormatFieldNumber = 3;
  ::google::protobuf::uint32 format() const;
  void set_format(::google::protobuf::uint32 value);

  // uint32 gain_left = 4;
  void clear_gain_left();
  static const int kGainLeftFieldNumber = 4;
  ::google::protobuf::uint32 gain_left() const;
  void set_gain_left(::google::protobuf::uint32 value);

  // uint32 gain_right = 5;
  void clear_gain_right();
  static const int kGainRightFieldNumber = 5;
  ::google::protobuf::uint32 gain_right() const;
  void set_gain_right(::google::protobuf::uint32 value);

  // bool mute_left = 6;
  void clear_mute_left();
  static const int kMuteLeftFieldNumber = 6;
  bool mute_left() const;
  void set_mute_left(bool value);

  // bool mute_right = 7;
  void clear_mute_right();
  static const int kMuteRightFieldNumber = 7;
  bool mute_right() const;
  void set_mute_right(bool value);

  // @@protoc_insertion_point(class_scope:HdaDuplexState.Stream)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 channel_;
  ::google::protobuf::uint32 format_;
  ::google::protobuf::uint32 gain_left_;
  ::google::protobuf::uint32 gain_right_;
  bool mute_left_;
  bool mute_right_;
  mutable int _cached_size_;
  friend struct ::protobuf_hda_5fduplex_2eproto::TableStruct;
  friend void ::protobuf_hda_5fduplex_2eproto::InitDefaultsHdaDuplexState_StreamImpl();
};
// -------------------------------------------------------------------

class HdaDuplexState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HdaDuplexState) */ {
 public:
  HdaDuplexState();
  virtual ~HdaDuplexState();

  HdaDuplexState(const HdaDuplexState& from);

  inline HdaDuplexState& operator=(const HdaDuplexState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HdaDuplexState(HdaDuplexState&& from) noexcept
    : HdaDuplexState() {
    *this = ::std::move(from);
  }

  inline HdaDuplexState& operator=(HdaDuplexState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HdaDuplexState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HdaDuplexState* internal_default_instance() {
    return reinterpret_cast<const HdaDuplexState*>(
               &_HdaDuplexState_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(HdaDuplexState* other);
  friend void swap(HdaDuplexState& a, HdaDuplexState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HdaDuplexState* New() const PROTOBUF_FINAL { return New(NULL); }

  HdaDuplexState* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HdaDuplexState& from);
  void MergeFrom(const HdaDuplexState& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HdaDuplexState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef HdaDuplexState_Stream Stream;

  // accessors -------------------------------------------------------

  // repeated .HdaDuplexState.Stream streams = 1;
  int streams_size() const;
  void clear_streams();
  static const int kStreamsFieldNumber = 1;
  const ::HdaDuplexState_Stream& streams(int index) const;
  ::HdaDuplexState_Stream* mutable_streams(int index);
  ::HdaDuplexState_Stream* add_streams();
  ::google::protobuf::RepeatedPtrField< ::HdaDuplexState_Stream >*
      mutable_streams();
  const ::google::protobuf::RepeatedPtrField< ::HdaDuplexState_Stream >&
      streams() const;

  // @@protoc_insertion_point(class_scope:HdaDuplexState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::HdaDuplexState_Stream > streams_;
  mutable int _cached_size_;
  friend struct ::protobuf_hda_5fduplex_2eproto::TableStruct;
  friend void ::protobuf_hda_5fduplex_2eproto::InitDefaultsHdaDuplexStateImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HdaDuplexState_Stream

// uint32 id = 1;
inline void HdaDuplexState_Stream::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 HdaDuplexState_Stream::id() const {
  // @@protoc_insertion_point(field_get:HdaDuplexState.Stream.id)
  return id_;
}
inline void HdaDuplexState_Stream::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:HdaDuplexState.Stream.id)
}

// uint32 channel = 2;
inline void HdaDuplexState_Stream::clear_channel() {
  channel_ = 0u;
}
inline ::google::protobuf::uint32 HdaDuplexState_Stream::channel() const {
  // @@protoc_insertion_point(field_get:HdaDuplexState.Stream.channel)
  return channel_;
}
inline void HdaDuplexState_Stream::set_channel(::google::protobuf::uint32 value) {
  
  channel_ = value;
  // @@protoc_insertion_point(field_set:HdaDuplexState.Stream.channel)
}

// uint32 format = 3;
inline void HdaDuplexState_Stream::clear_format() {
  format_ = 0u;
}
inline ::google::protobuf::uint32 HdaDuplexState_Stream::format() const {
  // @@protoc_insertion_point(field_get:HdaDuplexState.Stream.format)
  return format_;
}
inline void HdaDuplexState_Stream::set_format(::google::protobuf::uint32 value) {
  
  format_ = value;
  // @@protoc_insertion_point(field_set:HdaDuplexState.Stream.format)
}

// uint32 gain_left = 4;
inline void HdaDuplexState_Stream::clear_gain_left() {
  gain_left_ = 0u;
}
inline ::google::protobuf::uint32 HdaDuplexState_Stream::gain_left() const {
  // @@protoc_insertion_point(field_get:HdaDuplexState.Stream.gain_left)
  return gain_left_;
}
inline void HdaDuplexState_Stream::set_gain_left(::google::protobuf::uint32 value) {
  
  gain_left_ = value;
  // @@protoc_insertion_point(field_set:HdaDuplexState.Stream.gain_left)
}

// uint32 gain_right = 5;
inline void HdaDuplexState_Stream::clear_gain_right() {
  gain_right_ = 0u;
}
inline ::google::protobuf::uint32 HdaDuplexState_Stream::gain_right() const {
  // @@protoc_insertion_point(field_get:HdaDuplexState.Stream.gain_right)
  return gain_right_;
}
inline void HdaDuplexState_Stream::set_gain_right(::google::protobuf::uint32 value) {
  
  gain_right_ = value;
  // @@protoc_insertion_point(field_set:HdaDuplexState.Stream.gain_right)
}

// bool mute_left = 6;
inline void HdaDuplexState_Stream::clear_mute_left() {
  mute_left_ = false;
}
inline bool HdaDuplexState_Stream::mute_left() const {
  // @@protoc_insertion_point(field_get:HdaDuplexState.Stream.mute_left)
  return mute_left_;
}
inline void HdaDuplexState_Stream::set_mute_left(bool value) {
  
  mute_left_ = value;
  // @@protoc_insertion_point(field_set:HdaDuplexState.Stream.mute_left)
}

// bool mute_right = 7;
inline void HdaDuplexState_Stream::clear_mute_right() {
  mute_right_ = false;
}
inline bool HdaDuplexState_Stream::mute_right() const {
  // @@protoc_insertion_point(field_get:HdaDuplexState.Stream.mute_right)
  return mute_right_;
}
inline void HdaDuplexState_Stream::set_mute_right(bool value) {
  
  mute_right_ = value;
  // @@protoc_insertion_point(field_set:HdaDuplexState.Stream.mute_right)
}

// -------------------------------------------------------------------

// HdaDuplexState

// repeated .HdaDuplexState.Stream streams = 1;
inline int HdaDuplexState::streams_size() const {
  return streams_.size();
}
inline void HdaDuplexState::clear_streams() {
  streams_.Clear();
}
inline const ::HdaDuplexState_Stream& HdaDuplexState::streams(int index) const {
  // @@protoc_insertion_point(field_get:HdaDuplexState.streams)
  return streams_.Get(index);
}
inline ::HdaDuplexState_Stream* HdaDuplexState::mutable_streams(int index) {
  // @@protoc_insertion_point(field_mutable:HdaDuplexState.streams)
  return streams_.Mutable(index);
}
inline ::HdaDuplexState_Stream* HdaDuplexState::add_streams() {
  // @@protoc_insertion_point(field_add:HdaDuplexState.streams)
  return streams_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::HdaDuplexState_Stream >*
HdaDuplexState::mutable_streams() {
  // @@protoc_insertion_point(field_mutable_list:HdaDuplexState.streams)
  return &streams_;
}
inline const ::google::protobuf::RepeatedPtrField< ::HdaDuplexState_Stream >&
HdaDuplexState::streams() const {
  // @@protoc_insertion_point(field_list:HdaDuplexState.streams)
  return streams_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_hda_5fduplex_2eproto__INCLUDED
