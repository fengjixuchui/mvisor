// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pci_device.proto

#ifndef PROTOBUF_pci_5fdevice_2eproto__INCLUDED
#define PROTOBUF_pci_5fdevice_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_pci_5fdevice_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsPciDeviceState_MsiXTableEntryImpl();
void InitDefaultsPciDeviceState_MsiXTableEntry();
void InitDefaultsPciDeviceStateImpl();
void InitDefaultsPciDeviceState();
inline void InitDefaults() {
  InitDefaultsPciDeviceState_MsiXTableEntry();
  InitDefaultsPciDeviceState();
}
}  // namespace protobuf_pci_5fdevice_2eproto
class PciDeviceState;
class PciDeviceStateDefaultTypeInternal;
extern PciDeviceStateDefaultTypeInternal _PciDeviceState_default_instance_;
class PciDeviceState_MsiXTableEntry;
class PciDeviceState_MsiXTableEntryDefaultTypeInternal;
extern PciDeviceState_MsiXTableEntryDefaultTypeInternal _PciDeviceState_MsiXTableEntry_default_instance_;

// ===================================================================

class PciDeviceState_MsiXTableEntry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PciDeviceState.MsiXTableEntry) */ {
 public:
  PciDeviceState_MsiXTableEntry();
  virtual ~PciDeviceState_MsiXTableEntry();

  PciDeviceState_MsiXTableEntry(const PciDeviceState_MsiXTableEntry& from);

  inline PciDeviceState_MsiXTableEntry& operator=(const PciDeviceState_MsiXTableEntry& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PciDeviceState_MsiXTableEntry(PciDeviceState_MsiXTableEntry&& from) noexcept
    : PciDeviceState_MsiXTableEntry() {
    *this = ::std::move(from);
  }

  inline PciDeviceState_MsiXTableEntry& operator=(PciDeviceState_MsiXTableEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PciDeviceState_MsiXTableEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PciDeviceState_MsiXTableEntry* internal_default_instance() {
    return reinterpret_cast<const PciDeviceState_MsiXTableEntry*>(
               &_PciDeviceState_MsiXTableEntry_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(PciDeviceState_MsiXTableEntry* other);
  friend void swap(PciDeviceState_MsiXTableEntry& a, PciDeviceState_MsiXTableEntry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PciDeviceState_MsiXTableEntry* New() const PROTOBUF_FINAL { return New(NULL); }

  PciDeviceState_MsiXTableEntry* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PciDeviceState_MsiXTableEntry& from);
  void MergeFrom(const PciDeviceState_MsiXTableEntry& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PciDeviceState_MsiXTableEntry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 address = 1;
  void clear_address();
  static const int kAddressFieldNumber = 1;
  ::google::protobuf::uint64 address() const;
  void set_address(::google::protobuf::uint64 value);

  // uint32 data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  ::google::protobuf::uint32 data() const;
  void set_data(::google::protobuf::uint32 value);

  // uint32 control = 3;
  void clear_control();
  static const int kControlFieldNumber = 3;
  ::google::protobuf::uint32 control() const;
  void set_control(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PciDeviceState.MsiXTableEntry)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 address_;
  ::google::protobuf::uint32 data_;
  ::google::protobuf::uint32 control_;
  mutable int _cached_size_;
  friend struct ::protobuf_pci_5fdevice_2eproto::TableStruct;
  friend void ::protobuf_pci_5fdevice_2eproto::InitDefaultsPciDeviceState_MsiXTableEntryImpl();
};
// -------------------------------------------------------------------

class PciDeviceState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PciDeviceState) */ {
 public:
  PciDeviceState();
  virtual ~PciDeviceState();

  PciDeviceState(const PciDeviceState& from);

  inline PciDeviceState& operator=(const PciDeviceState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PciDeviceState(PciDeviceState&& from) noexcept
    : PciDeviceState() {
    *this = ::std::move(from);
  }

  inline PciDeviceState& operator=(PciDeviceState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PciDeviceState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PciDeviceState* internal_default_instance() {
    return reinterpret_cast<const PciDeviceState*>(
               &_PciDeviceState_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(PciDeviceState* other);
  friend void swap(PciDeviceState& a, PciDeviceState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PciDeviceState* New() const PROTOBUF_FINAL { return New(NULL); }

  PciDeviceState* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PciDeviceState& from);
  void MergeFrom(const PciDeviceState& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PciDeviceState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef PciDeviceState_MsiXTableEntry MsiXTableEntry;

  // accessors -------------------------------------------------------

  // repeated .PciDeviceState.MsiXTableEntry msix_entries = 5;
  int msix_entries_size() const;
  void clear_msix_entries();
  static const int kMsixEntriesFieldNumber = 5;
  const ::PciDeviceState_MsiXTableEntry& msix_entries(int index) const;
  ::PciDeviceState_MsiXTableEntry* mutable_msix_entries(int index);
  ::PciDeviceState_MsiXTableEntry* add_msix_entries();
  ::google::protobuf::RepeatedPtrField< ::PciDeviceState_MsiXTableEntry >*
      mutable_msix_entries();
  const ::google::protobuf::RepeatedPtrField< ::PciDeviceState_MsiXTableEntry >&
      msix_entries() const;

  // bytes config_space = 4;
  void clear_config_space();
  static const int kConfigSpaceFieldNumber = 4;
  const ::std::string& config_space() const;
  void set_config_space(const ::std::string& value);
  #if LANG_CXX11
  void set_config_space(::std::string&& value);
  #endif
  void set_config_space(const char* value);
  void set_config_space(const void* value, size_t size);
  ::std::string* mutable_config_space();
  ::std::string* release_config_space();
  void set_allocated_config_space(::std::string* config_space);

  // uint32 bus = 1;
  void clear_bus();
  static const int kBusFieldNumber = 1;
  ::google::protobuf::uint32 bus() const;
  void set_bus(::google::protobuf::uint32 value);

  // uint32 device = 2;
  void clear_device();
  static const int kDeviceFieldNumber = 2;
  ::google::protobuf::uint32 device() const;
  void set_device(::google::protobuf::uint32 value);

  // uint32 function = 3;
  void clear_function();
  static const int kFunctionFieldNumber = 3;
  ::google::protobuf::uint32 function() const;
  void set_function(::google::protobuf::uint32 value);

  // bool pcie = 6;
  void clear_pcie();
  static const int kPcieFieldNumber = 6;
  bool pcie() const;
  void set_pcie(bool value);

  // @@protoc_insertion_point(class_scope:PciDeviceState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::PciDeviceState_MsiXTableEntry > msix_entries_;
  ::google::protobuf::internal::ArenaStringPtr config_space_;
  ::google::protobuf::uint32 bus_;
  ::google::protobuf::uint32 device_;
  ::google::protobuf::uint32 function_;
  bool pcie_;
  mutable int _cached_size_;
  friend struct ::protobuf_pci_5fdevice_2eproto::TableStruct;
  friend void ::protobuf_pci_5fdevice_2eproto::InitDefaultsPciDeviceStateImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PciDeviceState_MsiXTableEntry

// uint64 address = 1;
inline void PciDeviceState_MsiXTableEntry::clear_address() {
  address_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PciDeviceState_MsiXTableEntry::address() const {
  // @@protoc_insertion_point(field_get:PciDeviceState.MsiXTableEntry.address)
  return address_;
}
inline void PciDeviceState_MsiXTableEntry::set_address(::google::protobuf::uint64 value) {
  
  address_ = value;
  // @@protoc_insertion_point(field_set:PciDeviceState.MsiXTableEntry.address)
}

// uint32 data = 2;
inline void PciDeviceState_MsiXTableEntry::clear_data() {
  data_ = 0u;
}
inline ::google::protobuf::uint32 PciDeviceState_MsiXTableEntry::data() const {
  // @@protoc_insertion_point(field_get:PciDeviceState.MsiXTableEntry.data)
  return data_;
}
inline void PciDeviceState_MsiXTableEntry::set_data(::google::protobuf::uint32 value) {
  
  data_ = value;
  // @@protoc_insertion_point(field_set:PciDeviceState.MsiXTableEntry.data)
}

// uint32 control = 3;
inline void PciDeviceState_MsiXTableEntry::clear_control() {
  control_ = 0u;
}
inline ::google::protobuf::uint32 PciDeviceState_MsiXTableEntry::control() const {
  // @@protoc_insertion_point(field_get:PciDeviceState.MsiXTableEntry.control)
  return control_;
}
inline void PciDeviceState_MsiXTableEntry::set_control(::google::protobuf::uint32 value) {
  
  control_ = value;
  // @@protoc_insertion_point(field_set:PciDeviceState.MsiXTableEntry.control)
}

// -------------------------------------------------------------------

// PciDeviceState

// uint32 bus = 1;
inline void PciDeviceState::clear_bus() {
  bus_ = 0u;
}
inline ::google::protobuf::uint32 PciDeviceState::bus() const {
  // @@protoc_insertion_point(field_get:PciDeviceState.bus)
  return bus_;
}
inline void PciDeviceState::set_bus(::google::protobuf::uint32 value) {
  
  bus_ = value;
  // @@protoc_insertion_point(field_set:PciDeviceState.bus)
}

// uint32 device = 2;
inline void PciDeviceState::clear_device() {
  device_ = 0u;
}
inline ::google::protobuf::uint32 PciDeviceState::device() const {
  // @@protoc_insertion_point(field_get:PciDeviceState.device)
  return device_;
}
inline void PciDeviceState::set_device(::google::protobuf::uint32 value) {
  
  device_ = value;
  // @@protoc_insertion_point(field_set:PciDeviceState.device)
}

// uint32 function = 3;
inline void PciDeviceState::clear_function() {
  function_ = 0u;
}
inline ::google::protobuf::uint32 PciDeviceState::function() const {
  // @@protoc_insertion_point(field_get:PciDeviceState.function)
  return function_;
}
inline void PciDeviceState::set_function(::google::protobuf::uint32 value) {
  
  function_ = value;
  // @@protoc_insertion_point(field_set:PciDeviceState.function)
}

// bytes config_space = 4;
inline void PciDeviceState::clear_config_space() {
  config_space_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PciDeviceState::config_space() const {
  // @@protoc_insertion_point(field_get:PciDeviceState.config_space)
  return config_space_.GetNoArena();
}
inline void PciDeviceState::set_config_space(const ::std::string& value) {
  
  config_space_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PciDeviceState.config_space)
}
#if LANG_CXX11
inline void PciDeviceState::set_config_space(::std::string&& value) {
  
  config_space_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PciDeviceState.config_space)
}
#endif
inline void PciDeviceState::set_config_space(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  config_space_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PciDeviceState.config_space)
}
inline void PciDeviceState::set_config_space(const void* value, size_t size) {
  
  config_space_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PciDeviceState.config_space)
}
inline ::std::string* PciDeviceState::mutable_config_space() {
  
  // @@protoc_insertion_point(field_mutable:PciDeviceState.config_space)
  return config_space_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PciDeviceState::release_config_space() {
  // @@protoc_insertion_point(field_release:PciDeviceState.config_space)
  
  return config_space_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PciDeviceState::set_allocated_config_space(::std::string* config_space) {
  if (config_space != NULL) {
    
  } else {
    
  }
  config_space_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), config_space);
  // @@protoc_insertion_point(field_set_allocated:PciDeviceState.config_space)
}

// repeated .PciDeviceState.MsiXTableEntry msix_entries = 5;
inline int PciDeviceState::msix_entries_size() const {
  return msix_entries_.size();
}
inline void PciDeviceState::clear_msix_entries() {
  msix_entries_.Clear();
}
inline const ::PciDeviceState_MsiXTableEntry& PciDeviceState::msix_entries(int index) const {
  // @@protoc_insertion_point(field_get:PciDeviceState.msix_entries)
  return msix_entries_.Get(index);
}
inline ::PciDeviceState_MsiXTableEntry* PciDeviceState::mutable_msix_entries(int index) {
  // @@protoc_insertion_point(field_mutable:PciDeviceState.msix_entries)
  return msix_entries_.Mutable(index);
}
inline ::PciDeviceState_MsiXTableEntry* PciDeviceState::add_msix_entries() {
  // @@protoc_insertion_point(field_add:PciDeviceState.msix_entries)
  return msix_entries_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::PciDeviceState_MsiXTableEntry >*
PciDeviceState::mutable_msix_entries() {
  // @@protoc_insertion_point(field_mutable_list:PciDeviceState.msix_entries)
  return &msix_entries_;
}
inline const ::google::protobuf::RepeatedPtrField< ::PciDeviceState_MsiXTableEntry >&
PciDeviceState::msix_entries() const {
  // @@protoc_insertion_point(field_list:PciDeviceState.msix_entries)
  return msix_entries_;
}

// bool pcie = 6;
inline void PciDeviceState::clear_pcie() {
  pcie_ = false;
}
inline bool PciDeviceState::pcie() const {
  // @@protoc_insertion_point(field_get:PciDeviceState.pcie)
  return pcie_;
}
inline void PciDeviceState::set_pcie(bool value) {
  
  pcie_ = value;
  // @@protoc_insertion_point(field_set:PciDeviceState.pcie)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_pci_5fdevice_2eproto__INCLUDED
